import sys
import os
import imp
import shutil
from glob import glob

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    config_path = GetBuildPath('#/build/Tools/SCons')
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)

def GlobSources(drct, patterns, excluded_files=[]):
    root = GetBuildPath('#'+drct)
    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]
    
def GetDirPath(dir):
    return '#/'+dir
    
def DeclareBuildDir(dir):
    env.VariantDir(dir, GetDirPath(dir), duplicate=0)

def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if Modules.has_key(module) and not module == exclude:
            dirs += Modules[module].GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if Modules.has_key(module):
            libs += Modules[module].GetLibraries()
        else:
            libs += [module]
    return libs

Modules = {}
class Module:
    def __init__(self, name, included_modules = [], linked_modules = []):
        self.name             = name
        self.included_modules = included_modules
        self.linked_modules   = linked_modules
        self.product          = []

    def GetLibraries(self):
        return self.product+GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules+self.build_include_dirs, self.name)
        
class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = '.',
                 build_source_pattern  = ['*.c', '*.cpp'], 
                 build_include_dirs    = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = [],
                 extra_link_flags      = [],
                 shared                = False,
                 install               = False,
                 installHeaders        = False) :
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]        
        Module.__init__(self, 
                        name, 
                        Split(included_modules)+Split(included_only_modules)+Split(build_source_dirs), 
                        Split(linked_modules)+Split(included_modules)) 
        self.build_include_dirs = build_include_dirs
        if environment is None:
            self.env = env.Clone()
        else:
            self.env = environment.Clone()
        self.env.AppendUnique(CPPDEFINES = extra_cpp_defines) 
        self.env.AppendUnique(LINKFLAGS = extra_link_flags)    

        # store this new object in the module dictionary
        Modules[name] = self
        
        # for each source drct to build, create a VariantDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobSources(drct, build_source_pattern, excluded_files)         
        
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobSources(drct_path, pattern)         
       
        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)          
                 
        # the product is a library
        self.env.AppendUnique(CPPPATH=cpp_path)
        if shared is False:
            self.product = self.env.StaticLibrary(target=name, source=sources)
        else:
            libs = GetLibraries(Split(linked_modules))
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, source=sources)
        self.env.Alias(name, self.product)

        # copy to Targets folder
        if install is True:
            inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']), source=self.product)
            if env['build_config'] == 'Release' and env.has_key('STRIP'):
                    env.AddPostAction(inst, env['STRIP']+' $TARGETS');
        
        if installHeaders is True:
            targetDir = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/include')
            if not os.path.exists(targetDir):  
                os.makedirs(targetDir)
            for subdir in Split(self.build_include_dirs):
                absoluteDir = env.GetBuildPath('#/'+subdir)
                print 'enter the dir: '+absoluteDir
                os.chdir(absoluteDir)
                headerFiles = []
                headerFiles = glob('*.h')
                for sourceFile in Split(headerFiles):
                    print 'copy file: '+sourceFile
                    shutil.copy(sourceFile,  targetDir)

            env.Clean(inst, targetDir)
                

def Application(name, dir, deps, 
                extra_link_flags = [], 
                install = False):
    DeclareBuildDir(dir)
    libs = GetLibraries(deps)
    cpp_path = GetIncludeDirs(deps)
    
    env.AppendUnique(LINKFLAGS = extra_link_flags)

    prog = env.Program(name, 
                       GlobSources(dir, ['*.c', '*.cpp']),
                       LIBS=libs, CPPPATH=cpp_path)
    
    # copy to Targets folder
    if install is True:
        inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']), source=prog)
        if env['build_config'] == 'Release' and env.has_key('STRIP'):
            env.AddPostAction(inst, env['STRIP']+' $TARGETS');

#######################################################
# Main Build
#######################################################
Import("env")

### try to read in any target specific configuration
target_config_file = env.GetBuildPath('#/build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)
else:
    print '*************', target_config_file, 'is not existed! ******************'

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The parameters are defined as below:
# 1) build_source_dirs: the directory where the source files are in.
# 2) build_source_files: the source files list that are built
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend on this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################
#  
COMMON_SOURCE_CODE_PATH = """src/BufferManagement 
                             src/ContentPipe 
                             src/DataSource 
                             src/Demuxer/base 
                             src/Demuxer/ffmpeg 
                             src/MagPlayer 
                             src/MagPlayerDriver 
                             src/Pipeline 
                             src/Pipeline/factory 
                             src/Pipeline/vendor/marvell_amp 
                             src/Pipeline/vendor/marvell_amp/esFormat"""

COMMON_HEADERS_PATH = """inc 
                         inc/common 
                         inc/omx 
                         inc/lmp 
                         src/StreamBuffer/inc 
                         src/Pipeline/inc 
                         src/Pipeline/inc/vendor/marvell_amp 
                         src/Pipeline/inc/vendor/marvell_amp/esFormat"""

FFMPEG_HEADERS_PATH = "external/ffmpeg-2.2.3"
EXTRA_LINKAGE_FLAGS = """-Lexternal/ffmpeg-2.2.3/libavformat -lavformat 
                         -Lexternal/ffmpeg-2.2.3/libavutil -lavutil 
                         -Lexternal/ffmpeg-2.2.3/libavcodec -lavcodec 
                         -Lexternal/ffmpeg-2.2.3/libswscale -lswscale"""

MRVL_AMP_INC_PATH        = """../csa_sdk/vendor/marvell-sdk/ampsdk/osal/include 
                              ../csa_sdk/vendor/marvell-sdk/ampsdk/amp/inc 
                              ../csa_sdk/vendor/marvell-sdk/ampsdk/amp/inc/isl"""
                              
MRVL_AMP_LINKAGE_FLAGS   = """-L../csa_sdk/vendor/marvell-sdk/ampsdk/out/linuxsdk_bg3cd/PEServer/lib 
                              -lampclient -lOSAL"""

ANDROID_SDK_LINKAGE_FLAGS = """-L../../csa_amp_1084_sdk/out/target/product/jb_dmp/system/lib 
                               -lcutils -lutils -lz -lcorkscrew -lgccdemangle"""

IP_CLIENT_SOURCE_CODE_PATH = ''
IP_CLIENT_EXTRA_SOURCE     = ''
IP_SERVER_SOURCE_CODE_PATH = ''
IP_SERVER_EXTRA_SOURCE     = ''
EXTRA_HEADERS_PATH         = ''
EXTRA_CC_DEFINES           = ['ARM', '__ARMCC_VERSION__', '__LINUX__']

if env['inter_process'] is True:
  EXTRA_CC_DEFINES += ['INTER_PROCESSES']
  if env['OS_TYPE'] == 'ANDROID':
    IP_CLIENT_SOURCE_CODE_PATH = """src/StreamBuffer/src/client/android 
                                    src/MagPlayerDriver/inter-process/client/android/src 
                                    src/MagPlayerDriver/inter-process/server/android/libMagPlayerService/src/interface"""
    IP_CLIENT_EXTRA_SOURCE     = 'src/StreamBuffer/src/server/android/MagStreamBufferUser.cpp'

    IP_SERVER_SOURCE_CODE_PATH = """src/MagPlayerDriver/inter-process/server/android/libMagPlayerService/src/interface 
                                    src/MagPlayerDriver/inter-process/server/android/libMagPlayerService/src
                                    src/StreamBuffer/src/server/android """
    IP_SERVER_EXTRA_SOURCE     = """src/StreamBuffer/src/client/android/MagStreamBuffer.cpp 
                                    src/MagPlayerDriver/inter-process/client/android/src/IMagPlayerClient.cpp"""
    EXTRA_HEADERS_PATH         = """src/MagPlayerDriver/inter-process/client/android/inc 
                                    MagPlayerDriver/inter-process/server/android/libMagPlayerService/inc 
                                    src/StreamBuffer/inc/android"""

LIBRARY_PATH = 'libs'
if env['OS_TYPE'] == 'ANDROID':
  LIBRARY_PATH = LIBRARY_PATH+'/android'
  EXTRA_HEADERS_PATH += 'inc/platform/android'
else:
  LIBRARY_PATH = LIBRARY_PATH+'/linux'
  EXTRA_HEADERS_PATH += 'inc/platform/linux'

LibraryModule(name                  = 'MagPlayer',
              build_source_dirs     = Split(COMMON_SOURCE_CODE_PATH)+Split(IP_CLIENT_SOURCE_CODE_PATH),
              build_include_dirs    = Split(COMMON_HEADERS_PATH)+
                                      Split(EXTRA_HEADERS_PATH)+
                                      Split(FFMPEG_HEADERS_PATH)+
                                      Split(MRVL_AMP_INC_PATH),
              extra_cpp_defines     = EXTRA_CC_DEFINES,
              extra_link_flags      = ['-L'+LIBRARY_PATH, '-lMagAgilelog', '-lMagFramework']+
                                      Split(EXTRA_LINKAGE_FLAGS)+
                                      Split(MRVL_AMP_LINKAGE_FLAGS),
              shared                =  True,
              install               =  True)


MAGPLAYER_LIB_PATH = 'Targets/'+env['target']+'/'+env['build_config']

LibraryModule(name                  = 'lmp',
              build_source_dirs     = ['players/lmp/src/impl'],
              build_include_dirs    = ['inc', 'inc/common', 'inc/framework', 'inc/lmp', 'players/lmp/inc'],
              extra_cpp_defines     = EXTRA_CC_DEFINES,
              extra_link_flags      = ['-L'+LIBRARY_PATH, '-lMagAgilelog', '-lMagFramework', '-L'+MAGPLAYER_LIB_PATH, '-lMagPlayer'],
              shared                =  True,
              install               =  True)

LibraryModule(name                  = 'MagPlayerStatic',
              build_source_dirs     = Split(COMMON_SOURCE_CODE_PATH)+Split(IP_CLIENT_SOURCE_CODE_PATH),
              build_include_dirs    = Split(COMMON_HEADERS_PATH)+
                                      Split(EXTRA_HEADERS_PATH)+
                                      Split(FFMPEG_HEADERS_PATH)+
                                      Split(MRVL_AMP_INC_PATH),
              extra_cpp_defines     = EXTRA_CC_DEFINES)

LibraryModule(name                  = 'lmpStatic',
              build_source_dirs     = ['players/lmp/src/impl'],
              build_include_dirs    = ['inc', 'inc/common', 'inc/framework', 'inc/lmp', 'players/lmp/inc'],
              linked_modules        = ['MagPlayerStatic'],
              extra_cpp_defines     = EXTRA_CC_DEFINES)

Application(name                    = 'lmpTest',
            dir                     = 'players/lmp/src/test',
            deps                    = ['lmpStatic'],
            extra_link_flags        = ['-L'+LIBRARY_PATH, '-lMagAgilelog', '-lMagFramework']+
                                      Split(EXTRA_LINKAGE_FLAGS)+
                                      Split(MRVL_AMP_LINKAGE_FLAGS),
            install                 =  True)