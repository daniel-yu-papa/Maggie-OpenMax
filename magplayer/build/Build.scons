import sys
import os
import imp
import shutil
from glob import glob

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    config_path = GetBuildPath('#/magplayer/build/Tools/SCons')
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)

def GlobSources(drct, patterns, excluded_files=[]):
    root = GetBuildPath('#/magplayer/'+drct)
    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]
    
def GetDirPath(dir):
    return '#/magplayer/'+dir
    
def DeclareBuildDir(dir):
    env.VariantDir(dir, GetDirPath(dir), duplicate=0)

def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if Modules.has_key(module) and not module == exclude:
            dirs += Modules[module].GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if Modules.has_key(module):
            libs += Modules[module].GetLibraries()
        else:
            libs += [module]
    return libs

Modules = {}
class Module:
    def __init__(self, name, included_modules = [], linked_modules = []):
        self.name             = name
        self.included_modules = included_modules
        self.linked_modules   = linked_modules
        self.product          = []

    def GetLibraries(self):
        return self.product+GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules+self.build_include_dirs, self.name)
        
class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = '.',
                 build_source_pattern  = ['*.c', '*.cpp'], 
                 build_include_dirs    = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = [],
                 extra_link_flags      = [],
                 extra_libs            = [], 
                 extra_lib_path        = [],
                 shared                = False,
                 install               = False) :
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]        
        Module.__init__(self, 
                        name, 
                        Split(included_modules)+Split(included_only_modules)+Split(build_source_dirs), 
                        Split(linked_modules)+Split(included_modules)) 
        self.build_include_dirs = build_include_dirs
        if environment is None:
            self.env = env.Clone()
        else:
            self.env = environment.Clone()
        self.env.AppendUnique(CPPDEFINES = extra_cpp_defines) 
        self.env.AppendUnique(LINKFLAGS = extra_link_flags)    

        # store this new object in the module dictionary
        Modules[name] = self
        
        # for each source drct to build, create a VariantDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobSources(drct, build_source_pattern, excluded_files)         
        
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobSources(drct_path, pattern)         
       
        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)          
                 
        # the product is a library
        self.env.AppendUnique(CPPPATH=cpp_path)
        if shared is False:
            self.product = self.env.StaticLibrary(target=name, source=sources)
        else:
            libs = GetLibraries(Split(linked_modules))+extra_libs
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, LIBPATH=extra_lib_path, source=sources)
        self.env.Alias(name, self.product)
        Default(self.product)

        # copy to Targets folder
        if install is True:
            inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/player'), source=self.product)
            if env['build_config'] == 'Release' and env.has_key('STRIP'):
                    env.AddPostAction(inst, env['STRIP']+' $TARGETS');
            Default(inst)
            
def Application(name, dir, 
                deps = [], 
                extra_include_path = [],
                extra_libs = [], 
                extra_lib_path = [], 
                install = False):
    DeclareBuildDir(dir)
    if deps != []:
      libs = GetLibraries(deps)+extra_libs
      cpp_path = GetIncludeDirs(deps)
    else:
      libs = []+extra_libs
      cpp_path = GetIncludeDirs(Split(extra_include_path))
    
    #env.AppendUnique(LINKFLAGS = extra_link_flags)

    prog = env.Program(name, 
                       GlobSources(dir, ['*.c', '*.cpp']),
                       LIBS=libs, LIBPATH=extra_lib_path, CPPPATH=cpp_path)
    Default(prog)

    # copy to Targets folder
    if install is True:
        inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/bin'), source=prog)
        if env['build_config'] == 'Release' and env.has_key('STRIP'):
            env.AddPostAction(inst, env['STRIP']+' $TARGETS');
        Default(inst)

def replaceWordInFile(input_file, output_file, word, replace):  
    input   = open(input_file)  
    lines   = input.readlines()  
    input.close()  
  
    output  = open(output_file,'w')  
    for line in lines:  
        if not line:  
            break  
        if (word in line):  
            temp    = line.split(word)  
            temp1   = temp[0] + replace + temp[1]  
            output.write(temp1)   
        else:  
            output.write(line)    
    output.close()  

#######################################################
# Main Build
#######################################################
Import("env")

### try to read in any target specific configuration
target_config_file = env.GetBuildPath('#/build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)
else:
    print '*************', target_config_file, 'is not existed! ******************'

#######################################################
# Build External freetype library
#######################################################
external_path = env.GetBuildPath('#/external')

freetype_link_file = env.GetBuildPath('#/external/freetype')
target_freetype_mk = env.GetBuildPath('#/build/Targets/'+env['target']+'/configs/freetype.config')
freetype_lib_install_path = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/freetype')
freetype_install_path = env.GetBuildPath('#/external/freetype/out')

if not os.path.exists(freetype_link_file):
    output = os.popen("ls "+external_path+"/*freetype*.tar.bz2")
    freetype_tarball = output.read()
    os.chdir(external_path)
    os.system("tar jxvf "+freetype_tarball)    
    output = os.popen("ls -d "+external_path+"/*freetype*/")
    freetype_full_dir = output.read()
    print "freetype_full_dir:"+freetype_full_dir
    freetype_dir = freetype_full_dir.split('/', 100)[-2] 
    print "freetype_dir:"+freetype_dir
    os.system("ln -s ./"+freetype_dir+" freetype")
    os.system("cp -f "+target_freetype_mk+" ./freetype")
    os.chdir("./freetype")
    replaceWordInFile("./freetype.config", "./freetype.config", "$INSTALL", freetype_install_path)
    os.system("chmod +x ./freetype.config")
    os.system("./freetype.config")
    os.system("make -j8")
    os.system("mkdir -p "+freetype_lib_install_path)
    os.system("cp -Pf objs/.libs/*.so* "+freetype_lib_install_path)
    os.system("mkdir -p "+freetype_install_path)
    os.system("make install")

#######################################################
# Build External SDL library
#######################################################
SDL_link_file = env.GetBuildPath('#/external/SDL')
target_SDL_mk = env.GetBuildPath('#/build/Targets/'+env['target']+'/configs/SDL.config')
SDL_lib_install_path = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/SDL')
SDL_install_path = env.GetBuildPath('#/external/SDL/out')

if not os.path.exists(SDL_link_file):
    output = os.popen("ls "+external_path+"/*SDL-*.tar.gz")
    SDL_tarball = output.read()
    os.chdir(external_path)
    os.system("tar zxvf "+SDL_tarball)    
    output = os.popen("ls -d "+external_path+"/*SDL*/")
    SDL_full_dir = output.read()
    print "SDL_full_dir:"+SDL_full_dir
    SDL_dir = SDL_full_dir.split('/', 100)[-2] 
    print "SDL_dir:"+SDL_dir
    os.system("ln -s ./"+SDL_dir+" SDL")
    os.system("cp -f "+target_SDL_mk+" ./SDL")
    os.chdir("./SDL")
    replaceWordInFile("./SDL.config", "./SDL.config", "$INSTALL", SDL_install_path)
    os.system("chmod +x ./SDL.config")
    os.system("./SDL.config")
    os.system("make -j8")
    os.system("mkdir -p "+SDL_lib_install_path)
    os.system("cp -Pf build/.libs/*.so* "+SDL_lib_install_path)
    os.system("mkdir -p "+SDL_install_path)
    os.system("make install")

#######################################################
# Build External SDL_ttf library
#######################################################
SDL_ttf_link_file = env.GetBuildPath('#/external/SDL_ttf')
target_SDL_ttf_mk = env.GetBuildPath('#/build/Targets/'+env['target']+'/configs/SDL_ttf.config')
SDL_ttf_lib_install_path = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/SDL_ttf')

if not os.path.exists(SDL_ttf_link_file):
    output = os.popen("ls "+external_path+"/*SDL_ttf-*.tar.gz")
    SDL_ttf_tarball = output.read()
    os.chdir(external_path)
    os.system("tar zxvf "+SDL_ttf_tarball)    
    output = os.popen("ls -d "+external_path+"/*SDL_ttf*/")
    SDL_ttf_full_dir = output.read()
    print "SDL_ttf_full_dir:"+SDL_ttf_full_dir
    SDL_ttf_dir = SDL_ttf_full_dir.split('/', 100)[-2] 
    print "SDL_ttf_dir:"+SDL_ttf_dir
    os.system("ln -s ./"+SDL_ttf_dir+" SDL_ttf")
    os.system("cp -f "+target_SDL_ttf_mk+" ./SDL_ttf")
    os.chdir("./SDL_ttf")
    replaceWordInFile("./SDL_ttf.config", "./SDL_ttf.config", "$SDL_PREFIX", SDL_install_path)
    replaceWordInFile("./SDL_ttf.config", "./SDL_ttf.config", "$FREETYPE_PREFIX", freetype_install_path)
    os.system("chmod +x ./SDL_ttf.config")
    os.system("./SDL_ttf.config")
    os.system("make -j8")
    os.system("mkdir -p "+SDL_ttf_lib_install_path)
    os.system("cp -Pf .libs/*.so* "+SDL_ttf_lib_install_path)

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The parameters are defined as below:
# 1) build_source_dirs: the directory where the source files are in.
# 2) build_source_files: the source files list that are built
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend on this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################
#  
FRAMEWORK_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib')
FFMPEG_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/ffmpeg')
MAGPLAYER_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/player')

FREETYPE_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/freetype')
SDL_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/SDL')
SDL_TTF_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib/SDL_ttf')

FRAMEWORK_INC_PATH = '../Targets/'+env['target']+'/'+env['build_config']+'/include'
OMXIL_COMMON_INC_PATH = '../Targets/'+env['target']+'/'+env['build_config']+'/include/omxil_common'

COMMON_SOURCE_CODE_PATH = """src/BufferManagement 
                             src/ContentPipe 
                             src/DataSource 
                             src/Demuxer/base 
                             src/Demuxer/ffmpeg 
                             src/MagPlayer 
                             src/MagPlayerDriver"""

PIPELINE_SOURCE_CODE_PATH = """src/Pipeline 
                               src/Pipeline/factory 
                               src/Pipeline/vendor/omxil 
                               src/Pipeline/mgr"""

COMMON_HEADERS_PATH = """inc 
                         inc/common 
                         inc/omx 
                         inc/lmp 
                         src/StreamBuffer/inc 
                         src/Pipeline/inc 
                         src/Pipeline/inc/vendor/omxil"""

FFMPEG_HEADERS_PATH = "../external/ffmpeg"
SDL_HEADERS_PATH = "../external/SDL/include"
SDL_TTF_HEADERS_PATH = "../external/SDL_ttf/"

if env['OS_TYPE'] == 'ANDROID':
  EXTRA_HEADERS_PATH = 'inc/platform/android'
else:
  EXTRA_HEADERS_PATH = 'inc/platform/linux'

LibraryModule(name                  = 'MagPipeline',
              build_source_dirs     = Split(PIPELINE_SOURCE_CODE_PATH),
              build_include_dirs    = Split(COMMON_HEADERS_PATH)+
                                      Split(FRAMEWORK_INC_PATH)+
                                      Split(OMXIL_COMMON_INC_PATH)+
                                      Split(FFMPEG_HEADERS_PATH)+
                                      Split(EXTRA_HEADERS_PATH),
              extra_libs            = ['libMagAgilelog.so', 
                                       'libMagFramework.so',
                                       'libMagOmxIL_Core.so'],
              extra_lib_path        = Split(FRAMEWORK_LIB_PATH),
              shared                = True,
              install               = True)


LibraryModule(name                  = 'MagPlayer',
              build_source_dirs     = Split(COMMON_SOURCE_CODE_PATH),
              build_include_dirs    = Split(COMMON_HEADERS_PATH)+
                                      Split(OMXIL_COMMON_INC_PATH)+
                                      Split(FFMPEG_HEADERS_PATH)+
                                      Split(FRAMEWORK_INC_PATH)+
                                      Split(EXTRA_HEADERS_PATH),
              extra_libs            = ['libMagAgilelog.so', 
                                       'libMagFramework.so',
                                       'libMagOmxIL_Core.so',
                                       'libMagPipeline.so',
                                       'libavformat.so',
                                       'libavutil.so',
                                       'libavcodec.so'],
              extra_lib_path        = Split(FRAMEWORK_LIB_PATH) + 
                                      Split(FFMPEG_LIB_PATH) + 
                                      Split(MAGPLAYER_LIB_PATH),
              shared                = True,
              install               = True)


LibraryModule(name                  = 'mmp',
              build_source_dirs     = ['player/src'],
              build_include_dirs    = ['inc', 'inc/common', 'inc/lmp', 'player/inc']+Split(FRAMEWORK_INC_PATH),
              extra_libs            = ['libMagAgilelog.so', 
                                       'libMagFramework.so',
                                       'libMagPlayer.so'],
              extra_lib_path        = Split(FRAMEWORK_LIB_PATH) + 
                                      Split(FFMPEG_LIB_PATH) + 
                                      Split(MAGPLAYER_LIB_PATH),
              shared                = True,
              install               = True)


Application(name                    = 'mmp_sdl',
            dir                     = 'ui/sdl',
            extra_include_path      = ['player/inc', 
                                       'inc/common', 
                                       FRAMEWORK_INC_PATH,
                                       OMXIL_COMMON_INC_PATH,
                                       SDL_HEADERS_PATH, 
                                       SDL_TTF_HEADERS_PATH,
                                       FFMPEG_HEADERS_PATH],
            extra_libs              = ['libMagAgilelog.so', 
                                       'libMagFramework.so',
                                       'libMagOmxIL_Core.so',
                                       'libMagOmxIL_Base.so',
                                       'libmmp.so',
                                       'libMagPlayer.so',
                                       'libpthread.so',
                                       'libMagPipeline.so',
                                       'libavformat.so',
                                       'libavutil.so',
                                       'libavcodec.so',
                                       'libswscale.so',
                                       'libfreetype.so',
                                       'libSDL.so',
                                       'libSDL_ttf.so'],
            extra_lib_path          = Split(MAGPLAYER_LIB_PATH)+
                                      Split(FRAMEWORK_LIB_PATH)+
                                      Split(FFMPEG_LIB_PATH)+
                                      Split(FREETYPE_LIB_PATH)+
                                      Split(SDL_LIB_PATH)+
                                      Split(SDL_TTF_LIB_PATH),
            install                 = True)


            