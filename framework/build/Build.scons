import sys
import os
import imp
import shutil
from glob import glob

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    config_path = GetBuildPath('#/framework/build/Tools/SCons')
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)

def GlobSources(drct, patterns, excluded_files=[]):
    root = GetBuildPath('#/framework/'+drct)
    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]
    
def GetDirPath(dir):
    return '#/framework/'+dir
    
def DeclareBuildDir(dir):
    env.VariantDir(dir, GetDirPath(dir), duplicate=0)

def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if Modules.has_key(module) and not module == exclude:
            dirs += Modules[module].GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if Modules.has_key(module):
            libs += Modules[module].GetLibraries()
        else:
            libs += [module]
    return libs

Modules = {}
class Module:
    def __init__(self, name, included_modules = [], linked_modules = []):
        self.name             = name
        self.included_modules = included_modules
        self.linked_modules   = linked_modules
        self.product          = []

    def GetLibraries(self):
        return self.product+GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules+self.build_include_dirs, self.name)
        
class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = '.',
                 build_source_pattern  = ['*.c', '*.cpp'], 
                 build_include_dirs    = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = [],
                 extra_link_flags      = [],
                 extra_libs            = [], 
                 extra_lib_path        = [],
                 shared                = False,
                 install               = False,
                 install_header_dirs   = []) :
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]        
        Module.__init__(self, 
                        name, 
                        Split(included_modules)+Split(included_only_modules)+Split(build_source_dirs), 
                        Split(linked_modules)+Split(included_modules)) 
        self.build_include_dirs = build_include_dirs
        if environment is None:
            self.env = env.Clone()
        else:
            self.env = environment.Clone()
        self.env.AppendUnique(CPPDEFINES = extra_cpp_defines) 
        self.env.AppendUnique(LINKFLAGS = extra_link_flags)    

        # store this new object in the module dictionary
        Modules[name] = self
        
        # for each source drct to build, create a VariantDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobSources(drct, build_source_pattern, excluded_files)         
        
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobSources(drct_path, pattern)         
       
        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)          
                 
        # the product is a library
        self.env.AppendUnique(CPPPATH=cpp_path)
        if shared is False:
            self.product = self.env.StaticLibrary(target=name, source=sources)
        else:
            libs = GetLibraries(Split(linked_modules))+extra_libs
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, LIBPATH=extra_lib_path, source=sources)
        self.env.Alias(name, self.product)
        Default(self.product)

        # copy to Targets folder
        if install is True:
            inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib'), source=self.product)
            if env['build_config'] == 'Release' and env.has_key('STRIP'):
                    env.AddPostAction(inst, env['STRIP']+' $TARGETS');
            Default(inst)
            
        if install_header_dirs:
            targetDir = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/include/framework')
            if not os.path.exists(targetDir):  
                os.makedirs(targetDir)
            for subdir in install_header_dirs:
                absoluteDir = env.GetBuildPath('#/framework/'+subdir)
                print 'enter the dir: '+absoluteDir
                os.chdir(absoluteDir)
                headerFiles = []
                headerFiles = glob('*.h')
                for sourceFile in Split(headerFiles):
                    print 'copy file: '+sourceFile
                    shutil.copy(sourceFile,  targetDir)

            env.Clean(inst, targetDir)
                

def Application(name, dir, deps, 
                extra_libs = [], 
                extra_lib_path = [],
                install = False):
    DeclareBuildDir(dir)
    libs = GetLibraries(deps)+extra_libs
    cpp_path = GetIncludeDirs(deps)

    prog = env.Program(name, 
                       GlobSources(dir, ['*.c', '*.cpp']),
                       LIBS=libs, LIBPATH=extra_lib_path, CPPPATH=cpp_path)
    Default(prog)

    # copy to Targets folder
    if install is True:
        inst = env.Install(dir=env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/bin'), source=prog)
        if env['build_config'] == 'Release' and env.has_key('STRIP'):
            env.AddPostAction(inst, env['STRIP']+' $TARGETS');
        Default(inst)

#######################################################
# Main Build
#######################################################
Import("env")

### try to read in any target specific configuration
target_config_file = env.GetBuildPath('#/build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)
else:
    print '*************', target_config_file, 'is not existed! ******************'

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The parameters are defined as below:
# 1) build_source_dirs: the directory where the source files are in.
# 2) build_source_files: the source files list that are built
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend on this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################
#  
AGILELOG_LIB_PATH = env.GetBuildPath('#/Targets/'+env['target']+'/'+env['build_config']+'/lib')

AGILELOG_INC_PATH = "../Targets/"+env['target']+"/"+env['build_config']+"/include/framework"

FRAMEWORK_COMMON_INC_PATH = """inc"""

FRAMEWORK_CORE_INC_PATH = """core/base/inc 
                             core/db/inc 
                             core/event/inc 
                             core/looper/inc 
                             core/message/inc 
                             core/ooc/inc"""

FRAMEWORK_PLATFORM_INC_PATH = """platform/hal/inc 
                                 platform/memory/inc 
                                 platform/thread/inc 
                                 platform/timer/inc 
                                 version"""

LibraryModule(name                  = 'MagCore_Base',
              build_source_dirs     = ['core/base/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagCore_DB',
              build_source_dirs     = ['core/db/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagCore_Event',
              build_source_dirs     = ['core/event/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagCore_Looper',
              build_source_dirs     = ['core/looper/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagCore_Message',
              build_source_dirs     = ['core/message/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagCore_OOC',
              build_source_dirs     = ['core/ooc/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagPlatform_Hal',
              build_source_dirs     = ['platform/hal/src'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagPlatform_Mem',
              build_source_dirs     = ['platform/memory/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagPlatform_Thread',
              build_source_dirs     = ['platform/thread/src/impl'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

LibraryModule(name                  = 'MagPlatform_Timer',
              build_source_dirs     = ['platform/timer/src'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH))

Application(name    = 'MagPlatform_RbTreeTest', 
                dir     = 'core/base/src/test', 
                deps    = ['MagCore_Base', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_DBTest', 
                dir     = 'core/db/src/test', 
                deps    = ['MagCore_DB', 'MagCore_Base', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_EventTest', 
                dir     = 'core/event/src/test', 
                deps    = ['MagCore_Event', 'MagCore_Base', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_LooperTest', 
                dir     = 'core/looper/src/test', 
                deps    = [ 'MagCore_Looper', 'MagPlatform_Thread', 'MagCore_Event', 'MagCore_Base', 'MagPlatform_Hal', 'MagPlatform_Timer'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_MessageTest', 
                dir     = 'core/message/src/test', 
                deps    = ['MagCore_Message', 'MagCore_Event', 'MagCore_Base', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_OOCTest', 
                dir     = 'core/ooc/src/test', 
                deps    = ['MagCore_OOC', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_MemPoolTest', 
                dir     = 'platform/memory/src/test', 
                deps    = ['MagCore_Message', 'MagPlatform_Mem', 'MagCore_Event', 'MagPlatform_Hal'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

Application(name    = 'MagPlatform_ThreadTest', 
                dir     = 'platform/thread/src/test', 
                deps    = ['MagPlatform_Thread', 'MagCore_Event', 'MagPlatform_Hal', 'MagPlatform_Mem'],
                extra_libs = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
                extra_lib_path = AGILELOG_LIB_PATH,
                install = True)

LibraryModule(name                  = 'MagFramework',
              build_source_dirs     = ['core/base/src/impl',
                                       'core/db/src/impl',
                                       'core/event/src/impl',
                                       'core/looper/src/impl',
                                       'core/message/src/impl',
                                       'core/ooc/src/impl',
                                       'platform/hal/src',
                                       'platform/memory/src/impl',
                                       'platform/thread/src/impl',
                                       'platform/timer/src',
                                       'version'],
              build_include_dirs    = Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH)+Split(AGILELOG_INC_PATH),
              extra_libs            = ['librt.so', 'libpthread.so', 'libMagAgilelog.so'],
              extra_lib_path        = AGILELOG_LIB_PATH,
              shared                =  True,
              install               =  True,
              install_header_dirs   =  Split(FRAMEWORK_COMMON_INC_PATH)+Split(FRAMEWORK_CORE_INC_PATH)+Split(FRAMEWORK_PLATFORM_INC_PATH))
